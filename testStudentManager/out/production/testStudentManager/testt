Phân tích phương thức `installDoor()` từ lớp `Contractor`

Phương thức `installDoor()` trong lớp `Contractor` được viết bằng mã giả giống Java như sau:

java
class Contractor {
    // any necessary instance variables
    // and methods defined here

    installDoor() {
        subcontractor = YellowPages.getSubcontractor();
        carpenter = subcontractor.getCarpenter();
        doorHandle = carpenter.getDoorHandle();
        doorBody = carpenter.selectDoorBody();
        screws = carpenter.getScrews();
        door = carpenter.assemble(doorHandle, doorBody, screws);
        securityExpert = subcontractor.getSecurityExpert();
        securityExpert.installDoorSensors(door);
    }
}


Xác định các vấn đề thiết kế

1. Thiếu Định Nghĩa và Khởi Tạo Biến Cục Bộ:
    - Các biến như `subcontractor`, `carpenter`, `doorHandle`, `doorBody`, `screws`, `door`, và `securityExpert` được sử dụng mà không được khai báo hoặc khởi tạo rõ ràng.

2. Thiếu Các Biến Instance:
    - Các biến cục bộ không được khai báo trong phương thức hoặc không là biến instance của lớp.

3. Không Có Xử Lý Ngoại Lệ:
    - Phương thức không xử lý các tình huống ngoại lệ có thể xảy ra như khi không thể lấy được `subcontractor` hoặc `carpenter`.

4. Phụ Thuộc Cao Vào Các Đối Tượng Khác:
    - `Contractor` phụ thuộc quá nhiều vào các đối tượng khác (`subcontractor`, `carpenter`, `securityExpert`) mà không kiểm soát được việc khởi tạo và sử dụng các đối tượng này.

Nguyên tắc thiết kế bị vi phạm

1. Nguyên Tắc Đóng Gói (Encapsulation):
    - Phương thức `installDoor()` truy cập và thao tác với nhiều đối tượng khác nhau mà không có sự đóng gói rõ ràng.

2. Nguyên Tắc Đơn Nhiệm (Single Responsibility Principle):
    - Phương thức `installDoor()` thực hiện quá nhiều nhiệm vụ, từ việc lấy các thành phần của cửa đến việc lắp ráp và cài đặt các cảm biến.

3. Nguyên Tắc Phụ Thuộc Vào Abstraction (Dependency Inversion Principle):
    - `Contractor` trực tiếp phụ thuộc vào các lớp cụ thể như `Subcontractor` và `Carpenter` thay vì phụ thuộc vào các interface hoặc abstraction.

Giải pháp

1. Khai báo và khởi tạo các biến cục bộ:
    java
    class Contractor {
        // any necessary instance variables
        // and methods defined here

        void installDoor() {
            Subcontractor subcontractor = YellowPages.getSubcontractor();
            Carpenter carpenter = subcontractor.getCarpenter();
            DoorHandle doorHandle = carpenter.getDoorHandle();
            DoorBody doorBody = carpenter.selectDoorBody();
            Screws screws = carpenter.getScrews();
            Door door = carpenter.assemble(doorHandle, doorBody, screws);
            SecurityExpert securityExpert = subcontractor.getSecurityExpert();
            securityExpert.installDoorSensors(door);
        }
    }


2. Xử lý ngoại lệ:
    java
    class Contractor {
        void installDoor() {
            try {
                Subcontractor subcontractor = YellowPages.getSubcontractor();
                Carpenter carpenter = subcontractor.getCarpenter();
                DoorHandle doorHandle = carpenter.getDoorHandle();
                DoorBody doorBody = carpenter.selectDoorBody();
                Screws screws = carpenter.getScrews();
                Door door = carpenter.assemble(doorHandle, doorBody, screws);
                SecurityExpert securityExpert = subcontractor.getSecurityExpert();
                securityExpert.installDoorSensors(door);
            } catch (Exception e) {
                // Handle exception appropriately
                System.out.println("An error occurred during door installation: " + e.getMessage());
            }
        }
    }


3. Tách các nhiệm vụ thành các phương thức riêng biệt:
    java
    class Contractor {
        void installDoor() {
            try {
                Door door = assembleDoor();
                installSensors(door);
            } catch (Exception e) {
                // Handle exception appropriately
                System.out.println("An error occurred during door installation: " + e.getMessage());
            }
        }

        Door assembleDoor() {
            Subcontractor subcontractor = YellowPages.getSubcontractor();
            Carpenter carpenter = subcontractor.getCarpenter();
            DoorHandle doorHandle = carpenter.getDoorHandle();
            DoorBody doorBody = carpenter.selectDoorBody();
            Screws screws = carpenter.getScrews();
            return carpenter.assemble(doorHandle, doorBody, screws);
        }

        void installSensors(Door door) {
            Subcontractor subcontractor = YellowPages.getSubcontractor();
            SecurityExpert securityExpert = subcontractor.getSecurityExpert();
            securityExpert.installDoorSensors(door);
        }
    }


Kết luận

Phương thức `installDoor()` ban đầu gặp phải nhiều vấn đề thiết kế, bao gồm việc không khai báo các biến cục bộ, thiếu xử lý ngoại lệ, và vi phạm các nguyên tắc thiết kế như đơn nhiệm và phụ thuộc vào abstraction. Việc cải thiện phương thức này bao gồm việc khai báo rõ ràng các biến, xử lý ngoại lệ, và tách các nhiệm vụ thành các phương thức nhỏ hơn để tăng tính gọn gàng và dễ bảo trì của mã nguồn.